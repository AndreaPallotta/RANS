---
- name: Install RANS packages
  hosts: localhost
  become: true
  become_method: sudo
  become_user: root
  gather_facts: true
  vars:
    ansible_python_interpreter: /usr/bin/python3

  vars_prompt:
    - name: arangodb_root_password
      prompt: 'Enter a password for the ArangoDB root user'
      confirm: true

    - name: arangodb_database_name
      prompt: 'Enter the name of the database you want to create'
      private: false

  pre_tasks:
    - name: Update Repositories
      dnf: update_cache=yes
      become_user: root
      changed_when: false

  tasks:
    - name: Check if Nginx is installed
      shell: which nginx
      args:
        executable: /bin/bash
      register: nginx_exists
      ignore_errors: true
      failed_when: false
      tags:
        - nginx

    - name: Check if ArangoDB is installed
      shell: which arangodb
      args:
        executable: /bin/bash
      register: arangodb_exists
      ignore_errors: true
      failed_when: false
      tags:
        - arangodb

    - name: Check if Rust dependencies are installed
      command: rpm -q "{{ item }}" || echo "not installed"
      register: rust_dependencies
      with_items:
        - yum-utils
        - epel-release
        - cmake
        - gcc
        - make
        - curl
        - clang
      ignore_errors: true
      failed_when: false
      tags:
        - rust

    - name: Check if Cargo is installed
      shell: which cargo
      args:
        executable: /bin/bash
      register: cargo_exists
      ignore_errors: true
      failed_when: false
      tags:
        - rust

    - name: Check if nginx service is running
      ansible.builtin.systemd:
        name: 'nginx'
      register: nginx_status
      ignore_errors: true
      tags:
        - nginx
    - name: Check if arangodb service is running
      ansible.builtin.systemd:
        name: 'arangodb'
      register: arangodb_status
      ignore_errors: true
      tags:
        - arangodb

    - name: Install Nginx
      when: nginx_exists is failed
      dnf:
        name: nginx
        state: present
      tags:
        - nginx

    - name: Add ArangoDB repository
      when: arangodb_exists is failed
      command: curl -OL https://download.arangodb.com/arangodb310/RPM/arangodb.repo
      args:
        chdir: /etc/yum.repos.d/
      tags:
        - arangodb

    - name: Install ArangoDB Server
      when: arangodb_exists is failed
      dnf:
        name: arangodb3-3.10.5-1.0
        state: present
      tags:
        - arangodb

    - name: Override ArangoDB Default Language
      when: arangodb_exists is failed
      ansible.builtin.copy:
        content: '{"default":"en_US.UTF-8"}'
        dest: /var/lib/arangodb3/LANGUAGE
      tags:
        - arangodb

    - name: Secure installation
      when: arangodb_exists is failed
      expect:
        command: arango-secure-installation
        responses:
          'Please enter a new password for the ArangoDB root user: ': '{{ arangodb_root_password }}'
          'Repeat password: ': '{{ arangodb_root_password }}'
      ignore_errors: true
      tags:
        - arangodb

    - name: Enable and start ArangoDB service
      when: arangodb_status.status.ActiveState != 'active'
      ansible.builtin.systemd:
        name: arangodb3
        enabled: yes
        state: started
      tags:
        - arangodb

    - name: Create Database
      command: arangosh --server.database _system --server.password="{{ arangodb_root_password }}" --javascript.execute-string "var db = require('internal').db; db._createDatabase('{{ arangodb_database_name }}')"
      ignore_errors: true
      tags:
        - arangodb

    - name: Create Tables
      command: arangosh --server.database _system --server.password="{{ arangodb_root_password }}" --javascript.execute-string "var db = require('internal').db; db._useDatabase('{{ arangodb_database_name }}'); db._create('Item'); db._create('User')"
      ignore_errors: true
      tags:
        - arangodb

    - set_fact:
        package_list: "{{ rust_dependencies.results | selectattr('stdout', 'search', 'not installed') | map(attribute='item') | list }}"
    - name: Install Rust Dependencies
      dnf:
        name: '{{ item }}'
        state: present
      with_items: '{{ package_list }}'
      tags:
        - rust
      ignore_errors: true

    - name: Download Rust Installed
      when: cargo_exists is failed
      get_url:
        url: https://sh.rustup.rs
        dest: /tmp/sh.rustup.rs
        mode: '0755'
        force: true
      tags:
        - rust

    - name: Install Rust
      when: cargo_exists is failed
      shell: /tmp/sh.rustup.rs -y
      args:
        executable: /bin/bash
      tags:
        - rust

    - name: Enable and start Nginx service
      when: nginx_status.status.ActiveState != 'active'
      ansible.builtin.systemd:
        name: nginx
        enabled: yes
        state: started
      tags:
        - nginx

    - name: Configure Firewall
      ansible.posix.firewalld:
        port: '{{ item }}/tcp'
        permanent: yes
        state: enabled
        immediate: yes
      tags:
        - firewall
      with_items:
        - 80
        - 8529
        - 3000
